services:
  # Keycloak services (existing)
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.1
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME_STRICT: "false"  # Permite acesso por diferentes hosts
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: 'true'
      KC_FEATURES: 'token-exchange,admin-fine-grained-authz'
      KC_PROXY: edge  # Configuração importante para proxy reverso
    ports:
      - "8080:8080"
    depends_on:
      - keycloak-db
    networks:
      - app-network
    command:
      - start-dev
    volumes:
      - keycloak_app_data:/opt/keycloak/data
    
  keycloak-db:
    image: postgres:17
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak_user
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck: # Healthcheck para o PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"] # Verifica se o DB está pronto
      interval: 5s
      timeout: 5s
      retries: 5

  # Banco de Dados para o Backend (Novo serviço)
  backend-db:
    image: postgres:16.1-alpine # Versão estável e leve do Postgres
    container_name: controle_academico_backend_db
    environment:
      POSTGRES_DB: academico_db       # Nome do banco de dados do backend
      POSTGRES_USER: academico_user   # Usuário do backend
      POSTGRES_PASSWORD: academico_pass # Senha do backend
    volumes:
      - backend_db_data:/var/lib/postgresql/data # Volume persistente para os dados do backend
    networks:
      - app-network
    healthcheck: # Healthcheck para o PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"] # Verifica se o DB está pronto
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend Quarkus
  backend:
    build:
      context: ./backend/academico-backend # O caminho para a pasta raiz do seu projeto backend (onde está o pom.xml)
      dockerfile: src/main/docker/Dockerfile.jvm # Caminho para o Dockerfile dentro da pasta backend
    container_name: controle_academico_backend
    ports:
      - "8081:8081" # Mapeia a porta interna (8081) para a porta externa (8081)
    environment:
      KEYCLOAK_URL: http://keycloak:8080/realms/controle-academico
      # Sobrescrever as propriedades do application.properties para o ambiente Docker
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://backend-db:5432/academico_db
      QUARKUS_DATASOURCE_USERNAME: academico_user
      QUARKUS_DATASOURCE_PASSWORD: academico_pass
      QUARKUS_PROFILE: dev
      QUARKUS_OIDC_CLIENT_ID: academico-backend
      QUARKUS_OIDC_CREDENTIALS_SECRET: dm3cpaNsboxZg6PRGyiObpqO6K3SjOgw
      QUARKUS_OIDC_CONNECTION_DELAY: 10s
      QUARKUS_OIDC_ROLES_ROLE_CLAIM_PATH: realm_access/roles
      QUARKUS_CONFIGURATION_OVERRIDE_MODE: env
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8081
      QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/realms/controle-academico
      QUARKUS_OIDC_TOKEN_ISSUER: http://localhost:8080/realms/controle-academico
      # Configurações CORS via variáveis de ambiente
      QUARKUS_HTTP_CORS: "true"
      QUARKUS_HTTP_CORS_ORIGINS: "http://localhost:4200,http://frontend:4200"
      QUARKUS_HTTP_CORS_METHODS: "GET,POST,PUT,DELETE,OPTIONS,HEAD"
      QUARKUS_HTTP_CORS_HEADERS: "Accept,Authorization,Content-Type,X-Requested-With,Range"
      QUARKUS_HTTP_CORS_ACCESS_CONTROL_ALLOW_CREDENTIALS: "true"
    depends_on:
      keycloak: # Depende do Keycloak para autenticação
        condition: service_started # Espera o Keycloak estar healthy
      backend-db: # Depende do DB do backend
        condition: service_healthy # Espera o DB estar healthy (opcional, requer healthcheck no DB)
    networks:
      - app-network
    healthcheck: # Healthcheck para o backend Quarkus
      test: ["CMD-SHELL", "curl -f http://localhost:8081/q/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Angular
  frontend:
    build:
      context: ./frontend # O caminho para a pasta raiz do seu projeto frontend Angular
      dockerfile: Dockerfile # O Dockerfile do frontend geralmente fica na raiz do projeto frontend
    container_name: controle_academico_frontend
    ports:
      - "4200:80" # Mapeia a porta do container (4200) para a porta da sua máquina (4200)
    depends_on:
      - backend # Depende do backend para comunicação
    networks:
      - app-network

volumes:
  keycloak_app_data:
  keycloak_db_data:
  backend_db_data: 

networks:
  app-network:
    driver: bridge