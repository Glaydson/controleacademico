# Database (para o banco de dados do seu backend)
quarkus.datasource.db-kind=postgresql
# A URL deve apontar para o serviço de banco de dados do seu backend na rede Docker
# Vamos chamar o serviço de 'backend-db' no docker-compose.
quarkus.datasource.jdbc.url=jdbc:postgresql://backend-db:5432/academico_db
quarkus.datasource.username=academico_user # Mudar para um usuário dedicado ao backend
quarkus.datasource.password=academico_pass # Mudar para uma senha dedicada ao backend
quarkus.hibernate-orm.schema-management.strategy = update # Use 'update' para produção, 'drop-and-create' é perigoso para dados
quarkus.hibernate-orm.log.sql=true 

# HTTP Server
quarkus.http.port=8081 

# Keycloak / OIDC (Ajustado para se conectar ao Keycloak na rede Docker)
# 'keycloak' é o nome do serviço do Keycloak no docker-compose.yml
quarkus.oidc.auth-server-url=http://keycloak:8080/realms/controle-academico
quarkus.oidc.client-id=academico-backend
quarkus.oidc.credentials.secret= # Mantenha vazio se o cliente for público, ou preencha se for confidencial
quarkus.oidc.token-path=/protocol/openid-connect/token
quarkus.oidc.jwks-path=/protocol/openid-connect/certs

# CORS para permitir o frontend Angular
# Aqui, use o nome do serviço do frontend, que vamos chamar de 'frontend'
quarkus.http.cors.origins=http://frontend:4200,http://localhost:4200
quarkus.http.cors.methods=GET,PUT,POST,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with
quarkus.http.cors.exposed-headers=Location

# Logging (opcional, para mais detalhes se precisar debugar)
# quarkus.log.level=INFO
# quarkus.log.category."org.hibernate".level=DEBUG