# ===================================================================
# SERVER CONFIGURATION
# ===================================================================
quarkus.http.port=8081
quarkus.http.host=0.0.0.0

# ===================================================================
# DATABASE CONFIGURATION (Development & Production Profile)
# ===================================================================
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://backend-db:5432/academico_db
quarkus.datasource.username=academico_user
quarkus.datasource.password=academico_pass
quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.sql=true

# ===================================================================
# OIDC - KEYCLOAK CONFIGURATION
# ===================================================================
quarkus.oidc.auth-server-url=http://localhost:8080/realms/controle-academico
quarkus.oidc.client-id=academico-backend
quarkus.oidc.credentials.secret=Xk2NkMGx2huDBloo3wTW1DSWefPViYXW
quarkus.oidc.application-type=service
# Role mapping configuration - tells Quarkus where to find roles in JWT token
quarkus.oidc.roles.role-claim-path=realm_access/roles
# For development, you might need to disable TLS verification if Keycloak uses self-signed certs
# quarkus.tls.trust-all=true

# ===================================================================
# SWAGGER UI / OPENAPI CONFIGURATION
# ===================================================================
# This makes the Swagger UI available in production.
# For development only, you would use %dev.quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.always-include=true
quarkus.smallrye-openapi.path=/openapi
quarkus.swagger-ui.path=/swagger-ui

# ===================================================================
# KEYCLOAK ADMIN CLIENT CONFIGURATION - Custom properties for manual client
# ===================================================================
# This client is used by the backend to communicate with Keycloak's Admin API
keycloak.admin.server-url=http://localhost:8080
keycloak.admin.realm=controle-academico
keycloak.admin.client-id=academico-backend
keycloak.admin.client-secret=Xk2NkMGx2huDBloo3wTW1DSWefPViYXW
keycloak.admin.grant-type=client_credentials

# ===================================================================
# HTTP SECURITY POLICIES
# IMPORTANT: Rules are evaluated in the order they appear. First match wins.
# ===================================================================

# 1. Publicly accessible paths (Swagger, Health Checks, Sync endpoint)
quarkus.http.auth.permission.public.paths=/q/health,/q/health/*,/openapi,/swagger-ui/*,/users/sync-keycloak
quarkus.http.auth.permission.public.policy=permit

# 2. Require authentication for API paths, but let @RolesAllowed handle authorization
quarkus.http.auth.permission.api.paths=/cursos/*,/users/*,/disciplinas/*
quarkus.http.auth.permission.api.policy=authenticated

# 3. Default rule: Deny all other paths by default to ensure security.
quarkus.http.auth.permission.default.paths=/*
quarkus.http.auth.permission.default.policy=deny

# ===================================================================
# CORS CONFIGURATION
# ===================================================================
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:4200,http://frontend:4200
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS

# ===================================================================
# LOGGING CONFIGURATION
# ===================================================================
quarkus.log.level=INFO
quarkus.log.category."com.glaydson".level=DEBUG
# Add OIDC debug logging to see JWT validation issues
quarkus.log.category."io.quarkus.oidc".level=DEBUG
quarkus.log.category."io.quarkus.security".level=DEBUG

# ===================================================================
# TEST PROFILE CONFIGURATION
# These properties are ONLY active when running tests (`mvn test`)
# ===================================================================
%test.quarkus.http.port=8082
# Use an in-memory H2 database for tests to isolate them
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
%test.quarkus.hibernate-orm.database.generation=drop-and-create
# Disable authentication for tests unless specifically testing security
%test.quarkus.security.test-mode=true
